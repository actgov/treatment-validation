from __future__ import division
import sys

from PyQt4 import QtCore, QtGui
import time, datetime, os
import numpy as np
import subprocess as sp

#FluDo script imports
import RTPlanParse
import DynaCollector

import matplotlib
from scipy import interpolate as interpl
from scipy import stats as spstats
from pylab import rcParams

import matplotlib.pyplot as plt
from matplotlib import cm, colors
from Dyn_to_Dose import Dyn_to_Dose as d2d
import PinRTPlanDCM as pdcm

from MainWindow import Ui_MainWindow

import TimeDialogScript as TDScript

import matplotlib.pyplot as plt
import matplotlib
from scipy import interpolate as interpl
from scipy import stats as spstats
from pylab import rcParams

from matplotlib import cm, colors
from Dyn_to_Dose import Dyn_to_Dose as d2d
import PinRTPlanDCM as pdcm
from matplotlib.backends.backend_pdf import PdfPages

import datetime
import reportlab


rcParams['figure.figsize'] = 17, 12

class StartQT4(QtGui.QMainWindow):
    def __init__(self, parent=None):
        QtGui.QWidget.__init__(self, parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

        self.ui.statusbar.showMessage("Click Analyse to start.")

        self.ui.textEditInfo.append("--------------------------------------FluDoPy------------------------------------------------------------------------")

        self.connect(self.ui.pushButtonAnalyse,QtCore.SIGNAL("clicked()"), self.Analyse)

    def add_maps(self,src, norm, title, fig, ax):
        # add plots to a single figure
        im1 = ax.imshow(src, norm=norm)
        ax.set_title(title)
        my_cax = fig.add_axes([0.92, 0.10, 0.02, 0.80])
        my_ticks = [15.0, 25.0, 50.0, (0.98 * np.max(src))]
        cbar = fig.colorbar(im1, cax=my_cax, ticks=my_ticks, label='arb. units')
        return fig, ax

    def show_maps(self,src, norm, title):
        fig1, ax1 = plt.subplots()
        print(type(fig1))
        im1 = ax1.imshow(src, norm=norm)
        ax1.set_title(title)
        my_cax = fig1.add_axes([0.9, 0.1, 0.03, 0.8])
        my_ticks = [15.0, 25.0, 50.0, (0.98 * np.max(src))]
        cbar = fig1.colorbar(im1, cax=my_cax, ticks=my_ticks)
        plt.show(block=False)

    def add_histo(self,diffs, fig, ax, bins=20):
        ax.hist(diffs.flatten(), bins, color='green', alpha=0.8)
        ax.set_title('Histogram of % error (Pinnacle as reference)')
        ax.set_xlabel('Percent error')
        ax.set_ylabel('Counts')
        return fig, ax

    def display_histo(self,diffs, bins=20):
        # hist, edges = np.histogram(diffs, bins=bins)
        fig = plt.figure(figsize=(10, 6))
        ax = fig.add_subplot(111)
        ax.hist(diffs.flatten(), bins, color='green', alpha=0.8)
        plt.show(block=False)

    def Analyse(self):
        self.ui.textEditInfo.clear()
        # ************************************End Find_IMRT_DCM*********************************************************
        # Run RTPlanParser class to scan for new RTPlans
        PP = RTPlanParse.RTPlanParser()
        PP.filterIMRT(PP.src_dcm_files)
        self.ui.statusbar.showMessage("No. of patients found: "+str(len(PP.imrt_candidates)))
        for f, n, pln, pld, plt in PP.imrt_candidates:
            self.ui.textEditInfo.append("patient: %s with plan name %s, on this date %s, at this time %s" % (n, pln, pld, plt))
        self.ui.textEditInfo.append("*********************************************************************************")
        #************************************End Find_IMRT_DCM**********************************************************

        #**************************Running Get_Dynalogs***************************************************************
        TimeDlg=TDScript.TimeDlg(self)
        TimeDlg.setModal(False)
        TimeDlg.exec_()
        self.ui.textEditInfo.append("Selected linac: "+self.ui.comboBoxLA.currentText())
        self.ui.textEditInfo.append("Time limit selected to scan Dynalog files: "+TimeDlg.comboBoxTime.currentText())
        self.ui.textEditInfo.append("*********************************************************************************")

        TimeLimitDyn=TimeDlg.comboBoxTime.currentIndex()
        SelectedLinac=self.ui.comboBoxLA.currentIndex()

        QtGui.QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
        self.ui.statusbar.showMessage("Running Get_Dynalogs.bat...! Please wait!")
        if TimeLimitDyn==0:
            arg0="a"
        elif  TimeLimitDyn==1:
            arg0="b"
        elif  TimeLimitDyn==2:
            arg0="c"
        elif TimeLimitDyn==3:
            arg0="d"

        #Add  m/c ID to args
        if SelectedLinac==0:
            arg1="1"
        elif SelectedLinac==1:
            arg1="3"
        elif SelectedLinac==2:
            arg1="4"


        CopyDyns = sp.call(["C:\\WINDOWS\\system32\\WindowsPowerShell\\v1.0\\powershell.exe", '-ExecutionPolicy',
                         'Unrestricted','-WindowStyle','Hidden',"D:\\Projects\\FluDoPy\\CopyDynasFluDoPy.ps",arg0,arg1])
        self.ui.statusbar.showMessage("Finished Get_Dynalogs.bat")
        QtGui.QApplication.restoreOverrideCursor()
        #************************************End Get_Dynalogs*********************************************************

        InitialsDlg = QtGui.QInputDialog(self)
        InitialsDlg.setLabelText('Report generated by:')
        InitialsDlg.setWindowTitle('FluDoPy')
        InitialsDlg.exec()
        Initials = InitialsDlg.textValue()

        # *************************************Running Parse_Dynalogs*************************************************
        self.ui.statusbar.showMessage("Running Parse_Dynalog...")
        DC = DynaCollector
        la1_dyna_path = r'D:\Temp\dyna_La1'
        la3_dyna_path = r'D:\Temp\dyna_La3'
        la4_dyna_path = r'D:\Temp\dyna_La4'

        if (SelectedLinac ==0):
            x = DC.StartHere(la1_dyna_path)
        elif (SelectedLinac==1):
            x = DC.StartHere(la3_dyna_path)
        elif (SelectedLinac==2):
            x = DC.StartHere(la4_dyna_path)
        self.ui.statusbar.showMessage("End of Parse_Dynalog")
        #*************************************************End Parse_Dynalogs******************************************

        # ************************LaunchFluDO   CELL 01*****************************************************************
        # dynalog_dir_path = r'/home/mpre/tmp_dynalogs_la4/Moss'
        # pinnacle_dcm_path = r'/home/mpre/tmp2/RTPLAN9869.1.dcm'
        init_pin_path = r'D:\RTPlanFromPin'
        init_dynalog_path = r'D:\Temp'

        dynalog_dir_path = ''  # r'D:\Temp\Deng_201611101'
        pinnacle_dcm_path = ''  # r'D:\RTPlanFromPin\Deng_Xiaoai__Nasopharynx_20161101_124914.dcm'

        dynalog_dir_path = QtGui.QFileDialog.getExistingDirectory(self,"Select Dynalog dir",init_dynalog_path)
        pinnacle_dcm_path = QtGui.QFileDialog.getOpenFileNames(self,"Select RT Plan",init_pin_path)[0]

        assert len(dynalog_dir_path) >= 1, len(pinnacle_dcm_path) >= 1

        # read in dynalog directory
        my_dyn2dose = d2d(dynalog_dir_path)

        # sort them according to attribute "filename".  This orders them by
        # time, oldest to newest by virtue of the file naming convention of
        # dynalogs
        my_dyn2dose.my_logs.sort(key=lambda x: x.filename)
        NumLogs=0
        for ml in my_dyn2dose.my_logs:
            hd, tail = os.path.split(ml.filename)
            NumLogs+=1
        LogsStr = "No. of logs found: "+str(NumLogs)
        self.ui.textEditInfo.append(LogsStr)
        self.ui.textEditInfo.append("*********************************************************************************")
        # calc and reconstruct fluence from Dynalogs
        my_dyn2dose.do_calcs(1.0)

        # ************************LaunchFluDO   CELL 02**************************************************************************
        my_od_maps = pdcm.PinRTPlanDCM(pinnacle_dcm_path)
        flu_y = [-19.5, -18.5, -17.5, -16.5, -15.5, -14.5, -13.5, -12.5, -11.5, -10.5, -9.75,
                 -9.25, -8.75, -8.25, -7.75, -7.25, -6.75, -6.25, -5.75, -5.25, -4.75, -4.25,
                 -3.75, -3.25, -2.75, -2.25, -1.75, -1.25, -0.75, -0.25, 0.25, 0.75, 1.25,
                 1.75, 2.25, 2.75, 3.25, 3.75, 4.25, 4.75, 5.25, 5.75, 6.25, 6.75, 7.25, 7.75,
                 8.25, 8.75, 9.25, 9.75, 10.5, 11.5, 12.5, 13.5, 14.5, 15.5, 16.5, 17.5, 18.5,
                 19.5]
        flu_x = np.linspace(-19.95, 19.95, 400)

        def jaw_match(pin, dyn, i, j):
            # tolerance to match jaw positions (mm)
            mytol = 2

            # convert dynalog jaw pos to integral mm and using DICOM co-ords
            d_y2 = int(10 * (dyn.my_logs[i].axis_data.jaws.y2.actual)[0])
            d_x2 = int(10 * (dyn.my_logs[i].axis_data.jaws.x2.actual)[0])
            d_y1 = int(-10 * (dyn.my_logs[i].axis_data.jaws.y1.actual)[0])
            d_x1 = int(-10 * (dyn.my_logs[i].axis_data.jaws.x1.actual)[0])

            difs = [abs(d_y2 - int(pin.y2jaw[j])),
                    abs(d_x2 - int(pin.x2jaw[j])),
                    abs(d_y1 - int(pin.y1jaw[j])),
                    abs(d_x1 - int(pin.x1jaw[j]))]
            for d in difs:
                if d >= mytol:
                    print('d is ', d)
                    return False
            # fall throguh to here means all difs must be < mytol:
            return True
            # print("d_x1: {0}, p_x: {1}".format(d_x1, int(pin.x1jaw[j])))
            # print("d_x2: {0}, p_x: {1}".format(d_x2, int(pin.x2jaw[j])))
            # print("d_y1: {0}, p_y: {1}".format(d_y1, int(pin.y1jaw[j])))
            # print("d_y2: {0}, p_y: {1}".format(d_y2, int(pin.y2jaw[j])))

        for i in range(0, len(my_dyn2dose.gant_angle)):
            Str1="Processing beam: "+str(i)
            self.ui.textEditInfo.append(Str1)
            #print("===\n", "i is: ", i);

            # need to use a dictionary here so we know if we have already
            # come across the same gantry angle (ie dealing with split
            # beams at the same gantry angle)

            j = 0
            while True:
                tol = 1.5  # tolerance for gantry angles
                if abs(my_dyn2dose.gant_angle[i] - my_od_maps.gant_angles[j]) <= tol:
                    self.ui.textEditInfo.append('potential match! j is {0:d} angle {1:f}'.format(j, my_od_maps.gant_angles[j]))
                    if jaw_match(my_od_maps, my_dyn2dose, i, j):
                        self.ui.textEditInfo.append('got a match! j is {0:d} angle {1:f}'.format(j, my_od_maps.gant_angles[j]))
                        my_dyn2dose.od_map_index[i] = j
                        break
                    else:
                        self.ui.textEditInfo.append('jaws do not agree - split beam perhaps?')
                        j += 1
                elif ((my_dyn2dose.gant_angle[i] < 0.8) or (my_dyn2dose.gant_angle[i] > 359.2)):
                    if ((my_od_maps.gant_angles[j] < 0.8) or (my_od_maps.gant_angles[j] > 359.2)):
                        self.ui.textEditInfo.append('potential match near gant 0! j is {0:d} angle {1:f}'.format(j, my_od_maps.gant_angles[j]))
                        if jaw_match(my_od_maps, my_dyn2dose, i, j):
                            self.ui.textEditInfo.append('got a match! j is {0:d} angle {1:f}'.format(j, my_od_maps.gant_angles[j]))
                            my_dyn2dose.od_map_index[i] = j
                            break
                        else:
                            self.ui.textEditInfo.append('jaws do not agree - split beam perhaps?')
                            j += 1
                    else:
                        self.ui.textEditInfo.append("need to increment j. j old is {0:d}".format(j))
                        j += 1
                elif j > my_od_maps.num_beams:
                    self.ui.textEditInfo.append("j incremented out of range - didn't get a gantry angle match")
                    break
                else:
                    j += 1
        self.ui.textEditInfo.append("*********************************************************************************")

        # Create the Pinnacle zoom list 'my_pin_zoom_list' which
        # zooms in on the Pinnacle map according to jaws (y jaws - 1.0 cm)
        # pre-allocate the list

        my_pin_zoom_list = [None] * my_dyn2dose.num_logs
        for i in range(0, my_dyn2dose.num_logs):
            print(i)
            y2 = (my_dyn2dose.my_logs[i].axis_data.jaws.y2.actual)[0]
            x2 = (my_dyn2dose.my_logs[i].axis_data.jaws.x2.actual)[0]
            y1 = (my_dyn2dose.my_logs[i].axis_data.jaws.y1.actual)[0]
            x1 = (my_dyn2dose.my_logs[i].axis_data.jaws.x1.actual)[0]
            # print("y2 is: ", y2)
            # print("y1 is: ",y1)
            # print("x1 is: ",x1)
            # print("x2 is: ",x2)
            # print ("=====", '\r\n')

            rows = np.linspace(-1.0 * (y1 - 0.05), (y2 - 0.05), ((y2 + y1) * 10))
            cols = np.linspace(-1.0 * (x1 - 0.05), (x2 - 0.05), ((x1 + x2) * 10))

            # print(rows)
            # print (cols)

            indx = my_dyn2dose.od_map_index[i]
            # some code to crop our fludo arrays to the same size as pin_zoom
            dm = my_od_maps.flus[indx]
            my_tmp = interpl.RectBivariateSpline(flu_x, flu_x, dm, kx=1, ky=1, s=0)
            my_pin_zoom_list[i] = my_tmp(rows, cols)

            my_dyn2dose.make_interp_single(i, rows, cols)

        # plot some fluences and dose maps TODO: Save 1 A4 page per beam.
        my_fig = 0

        #************************LaunchFluDO   CELL 03******************************************************************
        print(my_dyn2dose.gant_angle)
        Str2="Gantry angles found: "+str(my_dyn2dose.gant_angle)
        self.ui.textEditInfo.append(Str2)
        self.ui.textEditInfo.append("*********************************************************************************")

        #************************LaunchFluDO   CELL 04******************************************************************
        right_now = datetime.datetime.now()

        # get some demographics from Pinnacle Patient
        my_pin_dcm = my_od_maps.ds
        tt = str(my_pin_dcm.PatientName).split("^")
        plan_dt = str(my_pin_dcm.RTPlanDate)
        plan_nm = str(my_pin_dcm.RTPlanName)
        ts = tt[0].upper() + ", " + tt[1]

        # folder path to store PDFs
        pdf_dir = r'D:\FluDo_PDF'
        fname = tt[0].upper() + "-" + tt[1] + "_" + (right_now.strftime("%Y%m%d-%H%M%S")) + ".pdf"
        pdf_path = os.path.join(pdf_dir, fname)
        self.ui.textEditInfo.append("PDF will be saved to :"+pdf_path)
        print(pdf_path)

        pp = PdfPages(pdf_path)
        import matplotlib.pyplot as plt

        QtGui.QApplication.setOverrideCursor(QtCore.Qt.WaitCursor)
        self.ui.statusbar.showMessage("Generating report...! Please wait!")

        for i in range(0, my_dyn2dose.num_logs):
            f, axarray =plt.subplots(2, 2)

            my_pin_zoom = 100 * my_pin_zoom_list[i]
            pin_indx = my_dyn2dose.od_map_index[i]

            if hasattr (my_pin_dcm.BeamSequence[pin_indx],'BeamDescription'):
                beam_name = str(my_pin_dcm.BeamSequence[pin_indx].BeamDescription)
            else:
                beam_name = "angle {0}".format(my_dyn2dose.gant_angle[i])

            my_pin_amax = np.unravel_index(my_pin_zoom.argmax(), my_pin_zoom.shape)

            print("pinnacle amax index: ")
            print(my_pin_amax)

            # max_fludo = np.max(my_dyn2dose.interp_fluences[i])
            # my_FluDo = 100*(1/max_fludo)*my_dyn2dose.interp_fluences[i]
            my_FluDo = 100 * my_dyn2dose.interp_fluences[i]
            my_fd_amax = np.unravel_index(my_FluDo.argmax(), my_FluDo.shape)

            print("FluDo amax index: ")
            print(my_fd_amax)

            # create the colors.Normalize object (matplotlib)
            my_norm = colors.Normalize(vmin=np.min(my_pin_zoom),
                                       vmax=1.05 * np.max(my_pin_zoom), clip=False)

            # create Pinnacle Dose map
            # show_maps(my_pin_zoom, my_norm, 'Pinn Dose Map')
            f1, ax1 =self.add_maps(my_pin_zoom, my_norm, 'Planned Beam', f, axarray[0, 1])

            # stuff = input("Can you see 'Pinn Dose Map' figure?")

            # DO the 1st gaussian convolution on fluence
            # blur = ndi.filters.gaussian_filter(my_FluDo, 3.2, order=0, mode='reflect',
            #                                    cval=0.00, truncate=6.0)
            blur = my_FluDo
            my_diff_pct = 100 * abs((blur - my_pin_zoom) / np.max(my_pin_zoom))
            ##my_diff_pct = 100*abs((blur - my_pin_zoom)/ np.max(blur))

            my_mode, my_count = spstats.mode(my_diff_pct, axis=0)
            max_mode_diff = np.max(my_mode)

            print('maximum modal diff: %6.3f' % max_mode_diff)
            f2, ax2 =self.add_maps((blur), my_norm, 'Delivered Dynalog Beam', f, axarray[1, 1])

            # For now, simply find the modal difference and add it on to the
            # FluDo map
            my_diff_dc = 100 * abs((blur - my_pin_zoom) / np.max(my_pin_zoom))
            ##my_diff_dc = 100*abs((blur - my_pin_zoom)/np.max(blur))

            dat = ((0.01 * my_diff_dc) * my_pin_zoom)
            # display_histo(dat)
            f3, ax3 =self.add_histo(dat, f, axarray[0, 0], 20)

            f4, ax4 =self.add_maps(0.01 * my_diff_pct * my_pin_zoom, my_norm, 'Difference Map', f, axarray[1, 0])

            hist, edges = np.histogram(dat, bins=40)
            print('{0}'.format(hist))
            print('{0}'.format(edges[0:15]))

            total = np.sum(hist)
            print("total is {0:d}".format(total))
            targ = 0
            targ2 = 0
            delta = 1.01
            delta2 = 3.01
            for edge in edges:
                if edge < delta:
                    targ += 1
                if edge < delta2:
                    targ2 += 1

            my_fails = np.sum(hist[targ:-1])
            my_pct_pass = 1 - (my_fails / total)

            my_fails2 = np.sum(hist[targ2: -1])
            my_pct_pass2 = 1 - (my_fails2 / total)

            ax4 = axarray[1, 0]
            plt.setp(ax4.get_xticklabels(), visible=False)
            plt.setp(ax4.get_yticklabels(), visible=False)
            ax4.yaxis.set_ticks([])
            ax4.xaxis.set_ticks([])

            ax3.text(0.28, 0.90,
                     ("percentage of pixels < {0:d} % error is {1:.1f}".format(int(delta), 100 * my_pct_pass)),
                     horizontalalignment='left', transform=ax3.transAxes, fontsize=14)
            ax3.text(0.28, 0.83,
                     ("percentage of pixels < {0:d} % error is {1:.1f}".format(int(delta2), 100 * my_pct_pass2)),
                     horizontalalignment='left', transform=ax3.transAxes, fontsize=14)
            ax3.text(0.28, 0.76, ("Beam angle is: {0:.1f}".format(my_dyn2dose.gant_angle[i])),
                     horizontalalignment='left', transform=ax3.transAxes, fontsize=14)

            # tt = str(my_pin_dcm.PatientName).split("^")
            # plan_dt = str(my_pin_dcm.RTPlanDate)
            # plan_nm = str(my_pin_dcm.RTPlanName)
            # ts = tt[0].upper()+", "+ tt[1]
            print(ts)

            ReportStr='Report generated by:'+Initials
            f.suptitle('IMRT QA report for patient: {0:s}\nBeam Label: {1:s} | Plan Date: {2:s} | Plan Name: {3:s}\nReport generated by: {4:s}'
                       .format(ts, beam_name, plan_dt, plan_nm,Initials), fontsize=16)

            #plt.show()
            plt.savefig(pp, format='pdf')
            print("targ is: ", targ)
            print("hist[targ] is: ", hist[targ])
            print("pct pass is {0:f}".format(my_pct_pass))
        pp.close()
        QtGui.QApplication.restoreOverrideCursor()

        os.startfile(pdf_path)


if __name__ == "__main__":
    app = QtGui.QApplication(sys.argv)
    myapp = StartQT4()
    myapp.show()
    myapp.setWindowTitle('FluDoPy')
    sys.exit(app.exec_())
